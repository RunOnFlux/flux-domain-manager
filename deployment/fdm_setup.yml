---
- name: Install and configure FDM
  hosts: "{{ 'app2_fdm_servers' if DEPLOY_ENV == 'staging' else 'app_fdm_servers' }}"
  become: yes

  tasks:
    - name: Import MongoDB public GPG key
      ansible.builtin.get_url:
        url: "https://www.mongodb.org/static/pgp/server-6.0.asc"
        dest: /etc/apt/keyrings/mongo.asc
        mode: '0644'
        force: true

    - name: Add MongoDB repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/mongo.asc] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/6.0 multiverse"
        state: present
        filename: mongodb-org-6.0

    - name: Update apt package list
      ansible.builtin.apt:
        update_cache: yes

    - name: Install required packages
      ansible.builtin.package:
        name:
          - software-properties-common
          - certbot
          - haproxy
          - dirmngr
          - gnupg
          - apt-transport-https
          - ca-certificates
          - mongodb-org
          - build-essential
          - libssl-dev
          - curl
          - python3-pip
          - socat
        state: present

    - name: Install jc via python
      ansible.builtin.pip:
        name: jc
        version: 1.25.2
        break_system_packages: true

    - name: Install Node.js 22.x repository
      shell: "curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -"

    - name: Install Node.js
      apt:
        name: nodejs
        state: latest
        update_cache: yes

    - name: Install PM2 globally using NPM
      command: npm install -g pm2

    - name: Enable and start MongoDB service
      ansible.builtin.systemd:
        name: mongod
        state: started
        enabled: yes

    - name: Ensure directory exists
      ansible.builtin.file:
        path: /etc/ssl/fluxapps
        owner: root
        group: root
        state: directory
        mode: '0755'

    - name: Create /opt/update-certs.sh
      ansible.builtin.file:
        path: /opt/update-certs.sh
        state: touch
        owner: root
        group: root
        mode: '0775'

    - name: Copy new certbot-cron
      ansible.builtin.copy:
        src: certbot-cron
        dest: /etc/cron.d/certbot
        owner: root
        group: root
        mode: '0644'

    - name: Copy Minecraft LUA file
      ansible.builtin.copy:
        src: haproxy_minecraft.lua
        dest: /etc/haproxy/haproxy_minecraft.lua
        owner: root
        group: root
        mode: '0644'
    
    - name: Get dhparam
      ansible.builtin.get_url:
        url: https://ssl-config.mozilla.org/ffdhe4096.txt
        dest: /etc/haproxy/dhparam
        mode: '0644'

    - name: Reset config file to HEAD before git operations (FDM)
      shell: git checkout HEAD -- config/default.js
      args:
        chdir: flux-domain-manager
      ignore_errors: yes

    - name: Reset config file to HEAD before git operations (CDM)
      shell: git checkout HEAD -- config/default.js
      args:
        chdir: cert-domain-manager
      ignore_errors: yes

    - name: Clone FDM
      ansible.builtin.git:
        repo: https://github.com/RunOnFlux/flux-domain-manager.git
        dest: flux-domain-manager
        version: main
        force: yes
        update: yes
        clone: yes
        depth: 1
        accept_hostkey: yes

    - name: Clone FDM as CDM
      ansible.builtin.git:
        repo: https://github.com/RunOnFlux/flux-domain-manager.git
        dest: cert-domain-manager
        version: main
        update: yes
        force: yes
        clone: yes
        depth: 1
        accept_hostkey: yes

    - name: Copy default.js config to FDM
      ansible.builtin.template:
        src: default.js.j2
        dest: flux-domain-manager/config/default.js
        mode: '0644'
      vars:
        manageCertificateOnly: "false"
        appSubDomain: "{{ 'app2' if DEPLOY_ENV == 'staging' else 'app' }}"
        useSubset: "true"
        manageApps: "true"
        uiName: "home"
        apiName: "api"

    - name: Copy default.js config to CDM
      ansible.builtin.template:
        src: default.js.j2
        dest: cert-domain-manager/config/default.js
        mode: '0644'
      vars:
        manageCertificateOnly: "true"
        appSubDomain: "{{ 'app2' if DEPLOY_ENV == 'staging' else 'app' }}"
        useSubset: "false"
        manageApps: "true"
        uiName: "home"
        apiName: "api"

    - name: Ensure config files exist for FDM (they should already be there from git clone)
      ansible.builtin.file:
        path: "flux-domain-manager/config/{{ item }}"
        state: file
      loop:
        - cloudflareConfig.js
        - PDNSConfig.js
        - appsConfig.js

    - name: Ensure config files exist for CDM (they should already be there from git clone)
      ansible.builtin.file:
        path: "cert-domain-manager/config/{{ item }}"
        state: file
      loop:
        - cloudflareConfig.js
        - PDNSConfig.js
        - appsConfig.js

    - name: Install Dependencies FDM
      command: npm install
      args:
        chdir: flux-domain-manager

    - name: Install Dependencies CDM
      command: npm install
      args:
        chdir: cert-domain-manager

    - name: Create Static Rsync Json File
      set_fact:
        static_json:
          type: "{{ 'app2_fdm_servers' if DEPLOY_ENV == 'staging' else 'app_fdm_servers' }}"
          host: "{{ inventory_hostname }}"

    - name: Write the static JSON to a file
      ansible.builtin.copy:
        content: "{{ static_json | to_nice_json }}"
        dest: cert-domain-manager/deployment/rsync_config.json
        force: yes

    - name: Start FDM with PM2
      shell: |
        if pm2 describe FDM > /dev/null 2>&1; then
          pm2 restart FDM --update-env
        else
          pm2 start index.js --name FDM
        fi
      args:
        chdir: flux-domain-manager
      environment:
        NODE_ENV: production
        NODE_CONFIG_DIR: /root/flux-domain-manager/config

    - name: Start CDM with PM2
      shell: |
        if pm2 describe CDM > /dev/null 2>&1; then
          pm2 restart CDM --update-env
        else
          pm2 start index.js --name CDM
        fi
      args:
        chdir: cert-domain-manager
      environment:
        NODE_ENV: production
        NODE_CONFIG_DIR: /root/cert-domain-manager/config
